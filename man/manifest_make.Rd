% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/annotation_manifest.R
\name{manifest_make}
\alias{manifest_make}
\title{Make manifest without using schematic API}
\usage{
manifest_make(scope, recurse = TRUE, mf = NULL, schematic_style = TRUE)
}
\arguments{
\item{scope}{Initial scope to use for generating file manifest, i.e. a dataset parent folder.}

\item{recurse}{Include everything nested within scope, default \code{TRUE}, or only the immediate files.}

\item{mf}{Manifest to build upon; used when recursive.}

\item{schematic_style}{Default to schematic-style column naming. See details.}
}
\description{
This is meant for making or reconstituting a manifest (when using for Synapse files w/ existing annotations) given a scope.
For the latter, it's similar to schematic's \code{manifest_generate} with option \code{useAnnotations = TRUE}.
Why this exists and the main differences:
}
\details{
\itemize{
\item Faster and more convenient way to generate a \emph{schematic-compatible} manifest without having to use schematic.
"Schematic-compatible" means that if the current annotations were validated and submitted through schematic,
the reconstituted manifest should validate and submit successfully through schematic (given no bad changes made to the reconstituted version);
this can be tested by writing the table to csv and directly submitting through the API.
\item Can choose between generating manifest with just immediate files \emph{or} all nested files in scope.
Currently, schematic forces the latter; this allows an extra option useful for certain situations.
\item Does not look for stored "synapse_manifest.csv" like schematic does, which can avoid problems in some edge cases.
\item Manifest is reconstituted as R \code{data.table}, which can be turned into a csv, not Googlesheets or Excel interface.
This is because this is often \strong{used for programmatic annotation workflow}, not for manual annotation.
}
}
